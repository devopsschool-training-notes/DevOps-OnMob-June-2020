What is SonarQube?
-------------------
	Quality mgmt tool.
	Release
		Community - Free and OpenSource. [ FOCUS ]
		Enterprise - Paid
		Developer - 
		Cloud
	by SonarSource
	Written in JAVA.
		PLATFORM IND
		Need JRE to run.
	Backend - Supports All RDBMS
	For 27 programming languages
	
Quality
- Code Quality
- Test Quality [OUT OF SCOPE]


Why Code Quality?
--------------------------
70% of BUGS is FOUND Coz of Bad Code Quality

SonarQube Advance - 7 Axis of Code Quality.
---------------------------------------------
Coding standards—respect coding standards and follow best practices

Potential bugs—eliminate code violations to prevent vulnerabilities﻿

Documentation and comments—provide documentation especially for the Public API, the source code

Duplicated code—isolates and refines duplications, Don't Repeat Yourself

Complexity—equalizes disproportionate distributed complexity among components; eliminates complexity if possible

Test coverage—writes unit tests, especially for complex parts of the software

Design and architecture—minimize dependencies
---------------------------------------------


Method of Code Quality
-----------------
	Peer Code Review
	Static Code Review [ FOCUS ]
	- is a process in which it inclues programs to review a programs and give you a reports.


What are the tools/programs? for Static Code Review???
-----------------------------------
JAVA - 17 Tools 
	===== 
	Each tools has diff diff rules.
		Each rule is doing one thing.
===========================================
What do you need it?
	A place for all tools - rules
	A place for all reports
	A place for visualization of code quality over a period of time
	A place where can we fnd out.		
			WHO
			WhAt
			how
			Where?
	----------------------------
	SonarQube.

Architecute of SonarQube?
============================
SonarQube Server
	DB				DONE
		Any RDB
	SonarQube			DONE	
		Rules
		Profiles
		Gateway
	Searching & Index		DONE
		elasticsearch

Dev Laptop
	Scanner
	Source Code
		- Sonar prop [DYNAMICALLY by Maven-Gradle]

==============================
How to install it
	- JAVA
		sudo yum install java-11-openjdk-devel
		
	- download
		sudo yum install wget -y
		sudo yum install unzip -y
		sudo yum install tree -y
		wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.1.34397.zip
	- Extract
[ec2-user@ip-172-31-16-96 sonarqube]$ tree -L 1
.
├── bin		# START and STOP SonarQube
├── conf	# Config file of SonarQube
├── COPYING
├── data	# H2 of SonarQube
├── elasticsearch
├── extensions	# Plugins of SonarQube
├── lib		
├── logs
├── temp
└── web

	- Run
	- USE

13.233.8.47
35.154.31.158

http://13.233.8.47:9000/about
admin
admin
=================================================

/home/ec2-user/scanner/bin/sonar-scanner
============================================================
Assignment - 
Login to 
35.154.31.158
User Name - ec2-user
Key - PUTTY
https://www.devopsschool.com/notes/docker/2019/
File name - rajesh-mumbai.ppk

Step 1 - Create a dir with yourname.
Step 2 - Go into your dir
Step 3 - Clone Code from https://github.com/devopsschool-demo-labs-projects/java-sonarqube-helloworld-src
Step 4 - Download Scanner from website.
Step 5 - Modify Project name and key
Step 6 - Run Scanner of Code
Step 7 - Visualize - Create profile - Create gate and check it out.

===============================================================================
===============================================================================
===============================================================================
Makefile -> ANT -> NANT - mSBUILD - Maven - 	pybuider
c,c++	    java   dotnet dotnet	java	python
	

What is Gradle?
=====================
 	- Build mgmt tool.
	- Free
	- Open Source
	- Based on Plugins.
	- In Build Dependency mgmt tool.
	- DSL of GROOVY.
	- https://gradle.org/
	- Support Multiple Languages.

Why Gradle?
==================================
SCAN - Compile - UT - Package - Archive
======================================
		10 times in day

========================================================
Gradle Support 
		Procedural Lang	== MAVEN - Maven
		Declareative Lang == ANT - ivy

=========================================================
How gradle Works!!!
https://www.devopsschool.com/blog/gradle-tasks-are-exaplained-in-10-mins/

Gradle
	Plugins
	
		Core Plugins
		Script plugins - Declareative approach
		Binary Plugins  - procedural approach	
		https://docs.gradle.org/current/userguide/plugin_reference.html
			— Core Binary Plugins such as (e.g. JavaPlugin)
			— External Binary Plugins using community repos
			https://plugins.gradle.org/
			— custom Plugins
		
==========================================================================
Plugins BRINGS
		TASKS
			COPY 
			DELETE
			COMPILE
			TEST
			PACKAGE

External TASK -
https://docs.gradle.org/current/userguide/plugin_reference.html

Custom TASK  
https://plugins.gradle.org/

Built it
https://docs.gradle.org/current/dsl/index.html

==========================================================================
How to get started?
==================================
build.gradle - Main file.
https://www.devopsschool.com/blog/gradle-tasks-are-exaplained-in-10-mins/
https://www.devopsschool.com/blog/what-is-gradle-dag-directed-acyclic-graph/

setting.gradle
https://www.devopsschool.com/blog/what-is-settings-gradle-in-gradle/
- Project - Setting - Multi

properties.gradle
- Would contain property

======================
build.gradle
=======================
Skeleton

Project
	task1
		Has a Lifecycle
			 initialization - Init a project with setting.
		         configuration, and  - Package all config and Properties and Dep.
			 execution -- Actions & Methods
		Has Properties
		Has Actions & Methods
		Has Dependencies
		Script Block
	task2
		Has a Lifecycle
		Has Properties
		Has Actions & Methods
		Has Dependencies
		Script Block
	task3
		Has a Lifecycle
		Has Properties
		Has Actions & Methods
		Has Dependencies
		Script Block
====================================================
How to install Gradle?
================================================
	- JDK
	- Download
	- Extract 
	- Set path
	- Use it..
=============================
Approach - 1 = Declareative Lang == ANT - ivy


println 'This is executed during the configuration phase.'

task configured {
    println 'This is also executed during the configuration phase.'
}

task test {
    println 'This is executed during the execution phase.'
    doLast {
    	println "This is executed during the execution phase with doLast "
     }
    doFirst {
    	println "This is executed during the execution phase with doFirst "
    }
}

task mytask {
    println 'This is executed during the execution phase.'
    description "This is task 6"
    dependsOn copyDocs
    doLast {
    	println "This is executed during the execution phase with doLast "
     }
    doFirst {
    	println "This is executed during the execution phase with doFirst "
    }
}



task copyDocs(type: Copy) {
    from 'src'
    into 'dest'
}


Approach - 2 = Procedural Lang	== MAVEN - Maven

		
=============================================================
=============================================================
Step 1 - Install JAVA and Set JAVA_HOME
Step 2 - Download and Set Gradle
Step 3 - Create a JAVA project.
Step 4 - RUn following TASKS
	gradle compileJava
	gradle build	
	gradle test 
	gradle assemble
	gradle clean
https://www.devopsschool.com/blog/gradle-tasks-are-exaplained-in-10-mins/

